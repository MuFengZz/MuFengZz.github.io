<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GC算法</title>
    <url>/2021/06/05/GC%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="JVM的几种GC算法"><a href="#JVM的几种GC算法" class="headerlink" title="JVM的几种GC算法"></a>JVM的几种GC算法</h1><h3 id="1-标记-清除算法"><a href="#1-标记-清除算法" class="headerlink" title="1.标记-清除算法"></a>1.标记-清除算法</h3><p>首先标记处所有需要回收的对象，在标记完成后，统一回收掉所有被标记的对象。当然，也可以反过来，只标记存活的对象，统一回收未标记的对象。</p>
<p>缺点：</p>
<ul>
<li>执行效率不稳定。场景：堆中包含大量对象，且大部分需要回收，此时要进行大量的标记以及清除动作。</li>
<li>空间碎片化的问题。在执行完成GC以后，会产生大量的不连续的内存碎片。此时如果需要为程序分配较大的对象的时候则无法分配足够的连续内存，则需要再次进行GC。</li>
</ul>
<p><img src="https://raw.githubusercontent.com/ShengQiong/ImageBed/main/img/1622203815534-8ba0673f-3392-432d-b931-4502aa9a56f9.png"></p>
<h3 id="2-标记-复制算法"><a href="#2-标记-复制算法" class="headerlink" title="2.标记-复制算法"></a>2.标记-复制算法</h3><p>简称为复制算法，是为了解决标记-清除算法在面对大量可回收对象时执行效率低的问题而开发的。</p>
<p>它将可用内存按照容量划分为相等的两块，每次只使用其中的一块。当使用的一块空间耗尽时，就将存货的对象复制到另一半内存上。然后再把该内存区域一次清理掉。如果内存中有大量存活的对象，该算法将产生大量的内存复制开销，但如果内存中多数对象都是可回收情况，算法只需要复制很少的存活对象。每次回收仅针对整个半区进行回收，分配内存时也无需考虑内存碎片的问题，只需要移动堆顶指针，按顺序分配即可。</p>
<p>优点：</p>
<ul>
<li>实现简单，运行效率较高。解决了标记清除算法的内存碎片问题。</li>
</ul>
<p>缺点：</p>
<ul>
<li>该算法的可用内存只有原来的一半</li>
</ul>
<p><img src="https://i.loli.net/2021/06/09/z9TMHwylvmoWs12.png"></p>
<p>现在的商用Java虚拟机大多都优先采用了这种收集算法去回收新生代。</p>
<h3 id="3-标记-整理算法"><a href="#3-标记-整理算法" class="headerlink" title="3.标记-整理算法"></a>3.标记-整理算法</h3><p>为了解决标记-复制算法的一些问题，例如对象存活率较高的时候，要进行大量的复制操作，这会导致效率降低。更关键的是，如果不希望浪费一半的内存空间，就需要有额外的空间进行分配担保，以应对被使用的内存中所有对象都存活的极端情况。所以在老年代中一般不能直接选用这种算法。</p>
<p>针对老年代的对象存亡特征，出现了“标记-整理”（Mark-Compact）算法。</p>
<p>标记过程和标记清除算法完全一致。</p>
<p>后续步骤则为，让所有存活的对象都向内存空间的一端移动，然后直接清理掉边界以外的内存。</p>
<p><img src="https://i.loli.net/2021/06/09/Is8tpEBnf1uixMr.png"></p>
<p>优点：</p>
<ul>
<li>可以彻底消灭内存碎片</li>
<li>内存利用率非常高</li>
</ul>
<p>缺点：</p>
<ul>
<li>如果移动存活对象，尤其是在老年代这种每次回收都有着大量对象存活的区域，移动存活对象并且更新引用的开销是非常大的。而且这种对象移动的操作需要全程暂停用户应用程序才能进行。（标记清除算法也需要停顿用户线程，但停顿时间很短）</li>
</ul>
<p>如果标记整理算法不考虑移动和整理存活对象的话，在堆中的存活对象导致的空间碎片化问题只能依靠更复杂的内存分配器以及内存访问器来解决。例如通过“分区空闲分配链表”来解决内存分配问题。</p>
<h2 id="几种收集器的算法"><a href="#几种收集器的算法" class="headerlink" title="几种收集器的算法"></a>几种收集器的算法</h2><ol>
<li><p>Serial（串行GC）-复制</p>
</li>
<li><p>ParNew（并行GC）-复制</p>
</li>
<li><p>Parallel Scavenge（并行回收GC）-复制</p>
</li>
<li><p>Serial Old（MSC）（串行GC）-标记-整理</p>
</li>
<li><p>CMS（并发GC）-标记-清除</p>
</li>
<li><p>Parallel Old（并行GC）–标记-整理</p>
</li>
<li><p>G1（JDK1.7update14才可以正式商用）<br>-说明：</p>
</li>
<li><ol>
<li>1~3用于年轻代垃圾回收：年轻代的垃圾回收称为minor GC</li>
<li>4~6用于年老代垃圾回收（当然也可以用于方法区的回收）：年老代的垃圾回收称为full GC</li>
<li>G1独立完成”分代垃圾回收”</li>
<li>并行：多条垃圾回收线程同时操作</li>
<li>并发：垃圾回收线程与用户线程一起操作</li>
</ol>
</li>
</ol>
<h2 id="收集器算法实现细节"><a href="#收集器算法实现细节" class="headerlink" title="收集器算法实现细节"></a>收集器算法实现细节</h2><h3 id="1-引用计数算法"><a href="#1-引用计数算法" class="headerlink" title="1.引用计数算法"></a>1.引用计数算法</h3><p>在对象中添加一个引用计数器，每当有一个地方引用它时，计数器的值就+1，当引用失效时，计数器的值就-1。当某一个对象的引用计数器的值为0的时候，则认为这个对象为不会再被使用的。</p>
<p>特点：原理简单，判定效率高。</p>
<p>缺点：单纯的引用计数器无法解决对象之间的互相循环引用的问题。</p>
<p>例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ReferenceCountingGC &#123;</span><br><span class="line">    public Object instance &#x3D; null;</span><br><span class="line">    private static final int _1MB &#x3D; 1024 * 1024;</span><br><span class="line">    &#x2F;**</span><br><span class="line">    * 这个成员属性的唯一意义就是占点内存，以便能在GC日志中看清楚是否有回收过</span><br><span class="line">    *&#x2F;</span><br><span class="line">    private byte[] bigSize &#x3D; new byte[2 * _1MB];</span><br><span class="line">    public static void testGC() &#123;</span><br><span class="line">        ReferenceCountingGC objA &#x3D; new ReferenceCountingGC();</span><br><span class="line">        ReferenceCountingGC objB &#x3D; new ReferenceCountingGC();</span><br><span class="line">        objA.instance &#x3D; objB;</span><br><span class="line">        objB.instance &#x3D; objA;</span><br><span class="line">        objA &#x3D; null;</span><br><span class="line">        objB &#x3D; null;</span><br><span class="line">        &#x2F;&#x2F; 假设在这行发生GC，objA和objB是否能被回收？</span><br><span class="line">        System.gc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>如果是引用计数算法，objA和objB均无法被回收，因为他们的引用技术器的值为1。</p>
<h3 id="2-可达性分析算法"><a href="#2-可达性分析算法" class="headerlink" title="2.可达性分析算法"></a>2.可达性分析算法</h3><p>基本思想：通过一系列称为GC Roots的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索。搜索过程所走过的路径称为“引用链”（Reference Chain），如果某个对象到GC Roots间没有任何引用链相连， 或者用图论的话来说就是从GC Roots到这个对象不可达时，则证明此对象是不可能再被使用的。</p>
<p><img src="https://i.loli.net/2021/06/09/WwXEJUytlISqR6F.png"></p>
<p>上图中，虽然object5和object6以及object7有关联，但是它们无法到达GC Roots，所以他们会被判定为可回收的对象。</p>
<p>固定可作为GC Roots的对象包括以下几种：</p>
<ul>
<li>在虚拟机栈（栈帧中的本地变量表）中引用的对象，譬如各个线程被调用的方法堆栈中使用到的参数、局部变量、临时变量等。</li>
<li>在方法区中类静态属性引用的对象，譬如Java类的引用类型静态变量。</li>
<li>在方法区中常量引用的对象，譬如字符串常量池（String Table）里的引用。</li>
<li>在本地方法栈中JNI（即通常所说的Native方法）引用的对象。</li>
<li>Java虚拟机内部的引用，如基本数据类型对应的Class对象，一些常驻的异常对象（比如 NullPointExcepiton、OutOfMemoryError）等，还有系统类加载器。</li>
<li>所有被同步锁（synchronized关键字）持有的对象。</li>
<li>反映Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。</li>
</ul>
]]></content>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap分析</title>
    <url>/2021/06/14/HashMap%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="HashMap底层原理实现"><a href="#HashMap底层原理实现" class="headerlink" title="HashMap底层原理实现"></a>HashMap底层原理实现</h1><p>首先，我们要了解Java集合框架的基本结构图</p>
<p><img src="https://i.loli.net/2021/06/14/WvB4LAOEN9qQSgG.png"></p>
<p>然后我们进入HashMap源码</p>
<p><img src="https://i.loli.net/2021/06/14/rTbhdvjSaZXl4Ke.png"></p>
<p>可以看出，HashMap继承自AbstractMap&lt;K,V&gt;类，并且实现了Map&lt;K,V&gt;，Cloneable，Serializable接口。</p>
<h3 id="我们从HashMap内部的数据结构开始说起，一共有三种"><a href="#我们从HashMap内部的数据结构开始说起，一共有三种" class="headerlink" title="我们从HashMap内部的数据结构开始说起，一共有三种"></a>我们从HashMap内部的数据结构开始说起，一共有三种</h3><ul>
<li>数组</li>
<li>链表</li>
<li>红黑树（JDK8）</li>
</ul>
<p>HashMap维护了一个数组，数组中存储的是<code>Entry</code>，这是一种键值对。</p>
<p>当每一个Entry要被添加至HashMap中，首先都会计算其HashCode。在该过程中，比较重要的就是hash算法。如果hash算法设计的比较合理，那么就会让Entry均匀的分布在数组中。对于一般查询，时间复杂度应该为O(1)。如果hash算法对entry取模结果是一样的，那么则会在数组的对应位置生成一个链表。类似于下图所示。</p>
<p><img src="https://i.loli.net/2021/06/14/dLeqf6ItlxU4sjT.png"></p>
<p>如果用到链表查询，那么时间复杂度则为O(n)。</p>
<p>在JDK8中，当数组某一节点挂载的数量超过8后，则会将链表转化为红黑树，时间复杂度则降为O(logn)。</p>
<p>那么问题来了，为什么要将转化阈值设定为8呢？这是因为使用了泊松分布，在时间复杂度和空间复杂度上做了取舍。</p>
<p>在HashMap中，Node&lt;K,V&gt;实现了Map.Entry&lt;K,V&gt;</p>
<p><img src="https://i.loli.net/2021/06/14/FmklMP3efCtjWnq.png"></p>
<h3 id="接下来我们看一下HashMap的成员属性。"><a href="#接下来我们看一下HashMap的成员属性。" class="headerlink" title="接下来我们看一下HashMap的成员属性。"></a>接下来我们看一下HashMap的成员属性。</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* ---------------- Fields -------------- */</span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br></pre></td></tr></table></figure>

<p>在介绍各个属性之前，先来说一下这个<code>transient</code>关键字，在前文中，我们看到了HashMap实现了<code>Serializable</code>接口。transient关键字作用：被transient修饰的变量不参与序列化和反序列化。</p>
<ul>
<li>transient Node&lt;K,V&gt;[] table 该属性就是HashMap的核心数组</li>
<li>transient Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet 用于存放Map中所有Entry，便于用来遍历</li>
<li>transient int size 数组大小</li>
<li>transient int modCount 用于记录hashmap结构发生变化的次数</li>
<li>int threshold 临界值（加载因子*初始容量，当size大于临界值，数组自动扩容到原来2倍）</li>
<li>final float loadFactor 装载因子,默认0.75</li>
</ul>
<h3 id="HashMap扩容机制"><a href="#HashMap扩容机制" class="headerlink" title="HashMap扩容机制"></a>HashMap扩容机制</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* The default initial capacity - MUST be a power of two.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* The load factor used when none specified in constructor.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br></pre></td></tr></table></figure>

<p>从源码中我们可以看出，HashMap的初始长度为16(1&lt;&lt;4)，默认的负载因子为0.75。当数组被使用到75%(0.75)以上的时候，则会进行扩容。<code>int threshold 临界值（加载因子*初始容量，当size大于临界值，数组自动扩容到原来2倍）</code>。==负载因子为0.75时，碰撞的几率是最小的。==</p>
<p>在源码中我们阅读注释<code>MUST be a power of two.</code>，为什么数组的长度要为2的次幂呢？</p>
<p>这是为了在取模的时候优化性能。当判断一个元素进入某一个桶的时候，需要对Key的Hash进行取模。取模是一种重操作，非常消耗性能。而当数组的长度总是为2的n次幂时，用hash值与数组长度减一进行按位与运算，结果为对长度直接取模。位运算效率较高。(<code>hash % length === hash &amp; (length - 1)</code>)</p>
<p>Tips:对无符号的值取模和取余是一样的</p>
<h3 id="其他优化"><a href="#其他优化" class="headerlink" title="其他优化"></a>其他优化</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Computes key.hashCode() and spreads (XORs) higher bits of hash</span></span><br><span class="line"><span class="comment"> * to lower.  Because the table uses power-of-two masking, sets of</span></span><br><span class="line"><span class="comment"> * hashes that vary only in bits above the current mask will</span></span><br><span class="line"><span class="comment"> * always collide. (Among known examples are sets of Float keys</span></span><br><span class="line"><span class="comment"> * holding consecutive whole numbers in small tables.)  So we</span></span><br><span class="line"><span class="comment"> * apply a transform that spreads the impact of higher bits</span></span><br><span class="line"><span class="comment"> * downward. There is a tradeoff between speed, utility, and</span></span><br><span class="line"><span class="comment"> * quality of bit-spreading. Because many common sets of hashes</span></span><br><span class="line"><span class="comment"> * are already reasonably distributed (so don&#x27;t benefit from</span></span><br><span class="line"><span class="comment"> * spreading), and because we use trees to handle large sets of</span></span><br><span class="line"><span class="comment"> * collisions in bins, we just XOR some shifted bits in the</span></span><br><span class="line"><span class="comment"> * cheapest possible way to reduce systematic lossage, as well as</span></span><br><span class="line"><span class="comment"> * to incorporate impact of the highest bits that would otherwise</span></span><br><span class="line"><span class="comment"> * never be used in index calculations because of table bounds.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如上面的源码所示，在计算hash值的时候，为了减少hash碰撞，保留了高位和低位的信息，可以表现目标值的特征。所以右移了16位进行异或运算。</p>
<h3 id="HashMap-put-K-key-V-value"><a href="#HashMap-put-K-key-V-value" class="headerlink" title="HashMap put(K key, V value)"></a>HashMap put(K key, V value)</h3><p><img src="https://i.loli.net/2021/06/14/s6a9RcxSYzeBI5v.png"></p>
<h3 id="HashMap线程安全问题"><a href="#HashMap线程安全问题" class="headerlink" title="HashMap线程安全问题"></a>HashMap线程安全问题</h3><p>结论：HashMap不是线程安全的</p>
<p>如果想要在多线程情况下使用HashMap，可以考虑使用以下几种容器：</p>
<ul>
<li>ConcurrentHashMap<br>采用锁分段技术，减小锁的粒度，效率高<br>ConcurrentHashMap中是一次锁住一个桶。<br>ConcurrentHashMap默认将hash表分为16个桶，诸如get,put,remove等常用操作只锁当前需要用到的桶。<br>这样，原来只能一个线程进入，现在却能同时有16个写线程执行，并发性能的提升是显而易见的。上面说到的16个线程指的是写线程，而读操作大部分时候都不需要用到锁。只有在size等操作时才需要锁住整个hash表</li>
<li>collections.synchronizedMap(map)<br>采用synchronized方法上加锁，使用阻塞同步，效率低。</li>
<li>hashtable<br>采用synchronized方法上加锁，使用阻塞同步，效率低。</li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中的锁机制</title>
    <url>/2021/06/15/Java%E4%B8%AD%E7%9A%84%E9%94%81%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h3 id="1-什么是锁？"><a href="#1-什么是锁？" class="headerlink" title="1.什么是锁？"></a>1.什么是锁？</h3><p>在并发环境下，多个线程将会竞争同一个资源，这可能会导致数据不一致的问题。为了解决这种问题，引入了一种锁的机制。通过锁，来对资源进行锁定，保证了在某一时间点，资源只能被某一个线程访问，从而保证数据一致性。</p>
<p>在Java中，每个对象都拥有一把锁，这把锁存放于对象头中。锁中记录了当前对象被哪个线程所占用。对象、对象头结构如下图所示。（对象头被设计的极小(32/64bit)）</p>
<p><img src="https://i.loli.net/2021/06/15/Ch9tLKOuylEW6Ps.png"></p>
<p>其中，MarkWord(32bit)存放了和当前对象运行时状态有关的数据</p>
<p><img src="https://i.loli.net/2021/06/15/sXCNOetFqUJL7o4.png"></p>
<p>上图中，锁标志位01,01,00,10分别对应了无锁，偏向锁，轻量级锁和重量级锁。由于MarkWord是非结构化的，所以不同的锁标志位下，不同的字段可以重用不同的比特位。</p>
<h3 id="2-Synchronized关键字"><a href="#2-Synchronized关键字" class="headerlink" title="2.Synchronized关键字"></a>2.Synchronized关键字</h3><p>在Java中，Synchronized是一种同步锁。它可以修饰代码块，方法，静态方法，以及类。该关键字被编译后会生成monitorenter和monitorexit两个字节码指令。依赖这两个字节码指令进行线程同步。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rx.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MuFengZzz</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/06/15/15:23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-&gt;&quot;</span> + (++num));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread((() -&gt; &#123;</span><br><span class="line">            <span class="keyword">new</span> Sync().fun();</span><br><span class="line">        &#125;),<span class="string">&quot;A&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread((() -&gt; &#123;</span><br><span class="line">            <span class="keyword">new</span> Sync().fun();</span><br><span class="line">        &#125;),<span class="string">&quot;B&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>反编译后，得到结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">E:\Java_Code_Repository\JavaJUC\src\main\java\com\rx\Test&gt;javap -c Sync.class</span><br><span class="line">Compiled from <span class="string">&quot;Sync.java&quot;</span></span><br><span class="line">public class com.rx.Test.Sync &#123;</span><br><span class="line">  public com.rx.Test.Sync();</span><br><span class="line">    Code:</span><br><span class="line">       0: aload_0</span><br><span class="line">       1: invokespecial <span class="comment">#1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">       4: aload_0</span><br><span class="line">       5: iconst_0</span><br><span class="line">       6: putfield      <span class="comment">#2                  // Field num:I</span></span><br><span class="line">       9: <span class="built_in">return</span></span><br><span class="line"></span><br><span class="line">  public void fun();</span><br><span class="line">    Code:</span><br><span class="line">       0: aload_0</span><br><span class="line">       1: dup</span><br><span class="line">       2: astore_1</span><br><span class="line">       3: monitorenter</span><br><span class="line">       4: iconst_0</span><br><span class="line">       5: istore_2</span><br><span class="line">       6: iload_2</span><br><span class="line">       7: sipush        1000</span><br><span class="line">      10: if_icmpge     63</span><br><span class="line">      13: getstatic     <span class="comment">#3                  // Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">      16: new           <span class="comment">#4                  // class java/lang/StringBuilder</span></span><br><span class="line">      19: dup</span><br><span class="line">      20: invokespecial <span class="comment">#5                  // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">      23: invokestatic  <span class="comment">#6                  // Method java/lang/Thread.currentThread:()Ljava/lang/Thread;</span></span><br><span class="line">      26: invokevirtual <span class="comment">#7                  // Method java/lang/Thread.getName:()Ljava/lang/String;</span></span><br><span class="line">      29: invokevirtual <span class="comment">#8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBu</span></span><br><span class="line">ilder;</span><br><span class="line">      32: ldc           <span class="comment">#9                  // String -&gt;</span></span><br><span class="line">      34: invokevirtual <span class="comment">#8                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBu</span></span><br><span class="line">ilder;</span><br><span class="line">      37: aload_0</span><br><span class="line">      38: dup</span><br><span class="line">      39: getfield      <span class="comment">#2                  // Field num:I</span></span><br><span class="line">      42: iconst_1</span><br><span class="line">      43: iadd</span><br><span class="line">      44: dup_x1</span><br><span class="line">      45: putfield      <span class="comment">#2                  // Field num:I</span></span><br><span class="line">      48: invokevirtual <span class="comment">#10                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;</span></span><br><span class="line">      51: invokevirtual <span class="comment">#11                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span></span><br><span class="line">      54: invokevirtual <span class="comment">#12                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">      57: iinc          2, 1</span><br><span class="line">      60: goto          6</span><br><span class="line">      63: aload_1</span><br><span class="line">      64: monitorexit</span><br><span class="line">      65: goto          73</span><br><span class="line">      68: astore_3</span><br><span class="line">      69: aload_1</span><br><span class="line">      70: monitorexit</span><br><span class="line">      71: aload_3</span><br><span class="line">      72: athrow</span><br><span class="line">      73: <span class="built_in">return</span></span><br><span class="line">    Exception table:</span><br><span class="line">       from    to  target <span class="built_in">type</span></span><br><span class="line">           4    65    68   any</span><br><span class="line">          68    71    68   any</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>上面的反编译后的结果中第18行，以及第48行，52行出现了<code>monitorenter</code>以及<code>monitorexit</code>。</p>
<p>monitor可被翻译为监视器或管程。</p>
<ul>
<li><p><strong>monitorenter ：</strong></p>
<p>每个对象有一个监视器锁（monitor）。当monitor被占用时就会处于锁定状态，线程执行monitorenter指令时尝试获取monitor的所有权，过程如下：</p>
<p>如果monitor的进入数为0，则该线程进入monitor，然后将进入数设置为1，该线程即为monitor的所有者。</p>
<p>如果线程已经占有该monitor，只是重新进入，则进入monitor的进入数加1.</p>
<p>如果其他线程已经占用了monitor，则该线程进入阻塞状态，直到monitor的进入数为0，再重新尝试获取monitor的所有权。</p>
</li>
<li><p><strong>monitorexit：</strong></p>
<p>执行monitorexit的线程必须是objectref所对应的monitor的所有者。</p>
<p>指令执行时，monitor的进入数减1，如果减1后进入数为0，那线程退出monitor，不再是这个monitor的所有者。其他被这个monitor阻塞的线程可以尝试去获取这个 monitor 的所有权。</p>
<p>Synchronized的语义底层是通过一个monitor的对象来完成，其实wait/notify等方法也依赖于monitor对象，这就是为什么只有在同步的块或者方法中才能调用wait/notify等方法，否则会抛出java.lang.IllegalMonitorStateException的异常的原因。</p>
</li>
</ul>
<p>这就是synchronized关键字的同步机制。这里有一个性能问题，因为使用了monitor，而monitor依赖于OS（会出现系统的内核态切换），那么可能会出现线程切换的性能开销，远大于完成任务需要的开销。所以使用synchronized会对程序的性能产生影响。</p>
<h3 id="3-偏向锁，轻量级锁（JDK6），自旋锁，重量级锁"><a href="#3-偏向锁，轻量级锁（JDK6），自旋锁，重量级锁" class="headerlink" title="3.偏向锁，轻量级锁（JDK6），自旋锁，重量级锁"></a>3.偏向锁，轻量级锁（JDK6），自旋锁，重量级锁</h3><p>锁有四种状态，从低到高依次为，无锁，偏向锁，轻量级锁，重量级锁。所谓锁的升级就是从这四种状态依次改变。</p>
<p>&lt;1&gt;无锁：不对资源进行锁定。</p>
<p>无锁解决冲突的办法：CAS（CompareAndSwap）乐观锁</p>
<p>具体实现：CAS(V, E, N)</p>
<p>​    V 表示要更新的值。</p>
<p>​    E 表示预期的值。</p>
<p>​    N 表示新值。</p>
<p>​    <strong>仅当V值等于E值的，才会将V值设置为N值</strong>，如果V值和E值不同，则说明已经有其他线程做了更新，当前线程什么都不做。CVS返回的是当前V的真实值。</p>
<p>&lt;2&gt;偏向锁：它会偏向于第一个访问锁的线程，如果在运行过程中，同步锁只有一个线程访问，不存在多线程争用的情况，则线程是不需要触发同步的，这种情况下，就会给线程加一个偏向锁。如果在运行过程中，遇到了其他线程抢占锁，则持有偏向锁的线程会被挂起，JVM会消除它身上的偏向锁，将锁恢复到标准的轻量级锁。</p>
<p>偏向锁获取过程：</p>
<ol>
<li>访问Mark Word中偏向锁的标识是否设置成1，锁标志位是否为01，确认为可偏向状态。</li>
<li>如果为可偏向状态，则测试线程ID是否指向当前线程，如果是，进入步骤5，否则进入步骤3。</li>
<li>如果线程ID并未指向当前线程，则通过CAS操作竞争锁。如果竞争成功，则将Mark Word中线程ID设置为当前线程ID，然后执行5；如果竞争失败，执行4。</li>
<li>如果CAS获取偏向锁失败，则表示有竞争。当到达全局安全点（safepoint）时获得偏向锁的线程被挂起，偏向锁升级为轻量级锁，然后被阻塞在安全点的线程继续往下执行同步代码。（撤销偏向锁的时候会导致stop the word）</li>
<li>执行同步代码。</li>
</ol>
<p>&lt;3&gt;轻量级锁：轻量级锁是由偏向所升级来的，偏向锁运行在一个线程进入同步块的情况下，当第二个线程加入锁争用的时候，偏向锁就会升级为轻量级锁；</p>
<p>当升级为轻量级锁时，如何判断线程和锁之间的绑定关系呢？</p>
<p>​    线程ID变为了指向栈中锁记录的指针。</p>
<p>​    当一个线程想要获得某个对象的锁时，如果检测到锁标志位为00，则可知道它是轻量级锁。此时线程则会在虚拟机栈（线程私有）中开辟一块叫做LockRecord的空间。</p>
<p>​    LockRecord中存放了对象头中的MarkWord副本以及owner指针。线程通过CAS去尝试获取锁，一旦成功则会复制该对象头中的MarkWord到LockRecord中。并且LockRecord中的owner指针指向该对象。同时，对象的MarkWord的前30bit将会生成一个指针。指向线程虚拟机栈中的LockRecord，这样就实现了线程和锁之间的绑定关系。</p>
<p>&lt;3.5&gt;自旋锁:自旋锁原理非常简单，如果持有锁的线程能在很短时间内释放锁资源，那么那些等待竞争锁的线程就不需要做内核态和用户态之间的切换进入阻塞挂起状态，它们只需要等一等（自旋），等持有锁的线程释放锁后即可立即获取锁，这样就<strong>避免用户线程和内核的切换的消耗</strong>。如果此时其他线程尝试获取锁，则（想要获取锁）线程则会自旋等待。自旋（可以理解为一种轮询），不断的循环尝试获取锁。长时间的自旋将会浪费CPU资源。</p>
<p>一种名为“适应性自旋”的算法优化出现了。优化方式为：自旋的次数不在固定，而是由前一次在同一个锁上的自旋时间和锁的拥有者的状态共同决定。如果在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也是很可能再次成功的，进而它将会允许线程自旋相对更长的时间。如果对于某个锁，线程很少成功获得过，则会相应减少自旋的时间甚至直接进入阻塞的状态，避免浪费处理器资源。</p>
<p>&lt;4&gt;重量级锁：自旋等待的线程超过1个，轻量级锁则自动升级为重量级锁</p>
<p>用到了前文中提到的管程来对线程进行控制。将会完全锁定资源。</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>RestController&amp;Model无法共同使用问题</title>
    <url>/2021/06/05/RestController-Model%E6%97%A0%E6%B3%95%E5%85%B1%E5%90%8C%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="RestController-注解-ResponseBody和Model"><a href="#RestController-注解-ResponseBody和Model" class="headerlink" title="RestController 注解,ResponseBody和Model"></a>RestController 注解,ResponseBody和Model</h1><p>今天在写一个页面的时候，后端的控制器使用了RestController注解，在前端页面一直无法用thymeleaf的各种标签取出后端传给Model的值，经过大量的测试发现，如果后端使用了RestController注解，前端是无法取出值的。</p>
<p>同样的,使用ResponseBody注解也会出现这种问题。</p>
<p>因为RestController注解是一个组合注解，包含了</p>
<p>使用RestController注解，Model、ModelMap不能解析视图到页面，只能使用ModelAndView。因为当我们使用RestController时，默认每个方法都添加了ResponseBody注解，导致方法返回Model、ModelMap时，不能解析视图到页面，只能返回字符串。</p>
<blockquote>
<p>解决方案</p>
</blockquote>
<p>而ModelAndView能指定返回到的视图页面，所以使用RestController注解，就能解析视图页面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/modelAndView&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">modelAndView</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//构建ModelAndView实例，并设置跳转地址(页面)为hello</span></span><br><span class="line">        ModelAndView view = <span class="keyword">new</span> ModelAndView(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="comment">//将数据放置到ModelAndView对象view中,第二个参数可以是任何java类型</span></span><br><span class="line">        view.addObject(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">        <span class="comment">//返回ModelAndView对象view</span></span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC过滤器中文乱码</title>
    <url>/2020/09/24/SpringMVC%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</url>
    <content><![CDATA[<h1 id="今天在学习SpringMVC的中文乱码过滤器的时候遇到了如下问题"><a href="#今天在学习SpringMVC的中文乱码过滤器的时候遇到了如下问题" class="headerlink" title="今天在学习SpringMVC的中文乱码过滤器的时候遇到了如下问题"></a>今天在学习SpringMVC的中文乱码过滤器的时候遇到了如下问题</h1><h2 id="明明配置好了过滤器但是却没有生效"><a href="#明明配置好了过滤器但是却没有生效" class="headerlink" title="明明配置好了过滤器但是却没有生效"></a>明明配置好了过滤器但是却没有生效</h2><h2 id="过滤器配置如下"><a href="#过滤器配置如下" class="headerlink" title="过滤器配置如下"></a>过滤器配置如下</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--解决中文乱码过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置了以后问题依旧<br><img src="https://i.loli.net/2021/06/09/wolBmes3KM6WIQE.png"></p>
<p>通过查阅资料，在tomcat目录下的\conf\server.xml文件找到Connector标签</p>
<p>在后面加入URIEncoding=”UTF-8”</p>
<p>结果问题依旧</p>
<hr>
<p>最后设置了VM options<br>VM options: Dfile.encoding=UTF-8<br>问题解决</p>
<hr>
<h2 id><a href="#" class="headerlink" title></a><img src="https://i.loli.net/2021/06/09/iQhD6OCF75uqcav.png"></h2><p><img src="https://i.loli.net/2021/06/09/bEiZkFHIlPUhfp5.png"></p>
]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS开放端口</title>
    <url>/2020/10/17/CentOS%E5%BC%80%E6%94%BE%E7%AB%AF%E5%8F%A3/index/</url>
    <content><![CDATA[<h1 id="本地服务器（基于VMware-CentOS-7）部署常用软件时遇到的问题"><a href="#本地服务器（基于VMware-CentOS-7）部署常用软件时遇到的问题" class="headerlink" title="本地服务器（基于VMware + CentOS 7）部署常用软件时遇到的问题"></a>本地服务器（基于VMware + CentOS 7）部署常用软件时遇到的问题</h1><p>看完了CodeSheep的<a href="https://www.bilibili.com/video/BV1bA411b7vs">建议人手一套：个人专属多节点Linux环境打造，Linux操作系统学习实验环境安装配置视频教程</a>，突然也想打造一套多节点的本地服务器。但是前几天安装软件的时候，遇到了如下问题：</p>
<p>例如：MySQL无法远程连接，redis无法远程访问等等这些问题</p>
<p>刚开始以为是软件安装的问题，后来经过查阅资料，发现是端口未开放。</p>
<p>通过以下命令解决</p>
<p>1、开启防火墙 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start firewalld</span><br></pre></td></tr></table></figure>

<p>2、开放指定端口(以8080端口为例)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br></pre></td></tr></table></figure>

<p>命令含义：<br>–zone #作用域<br>–add-port=xxxx/tcp  #添加端口，格式为：端口/通讯协议<br>–permanent  #永久生效，没有此参数重启后失效</p>
<p>3、重启防火墙</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>JVM笔记</title>
    <url>/2021/06/05/JVM%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="JVM虚拟机"><a href="#JVM虚拟机" class="headerlink" title="JVM虚拟机"></a>JVM虚拟机</h1><h2 id="1-JVM的位置"><a href="#1-JVM的位置" class="headerlink" title="1.JVM的位置"></a>1.JVM的位置</h2><p><img src="https://i.loli.net/2021/06/09/MKSOTckLZ9AfsNQ.png"></p>
<h2 id="2-JVM的体系结构"><a href="#2-JVM的体系结构" class="headerlink" title="2.JVM的体系结构"></a>2.JVM的体系结构</h2><p><img src="https://i.loli.net/2021/06/09/ML2nUS49xZ1cioE.png"></p>
<p>上图中，Java栈，本地方法栈，程序计数器，均不会有垃圾回收</p>
<p>JVM架构图</p>
<p><img src="https://i.loli.net/2021/06/09/K2ygZFrVcEHR49I.png"></p>
<h2 id="3-类加载器"><a href="#3-类加载器" class="headerlink" title="3.类加载器"></a>3.类加载器</h2><p>​    作用：加载Class文件</p>
<p><img src="https://i.loli.net/2021/06/09/A5eKoLfQyjnYP21.png"></p>
<p>JVM中提供了三层的ClassLoader：</p>
<ul>
<li>Bootstrap classLoader:主要负责加载核心的类库(java.lang.*等)，构造ExtClassLoader和APPClassLoader。</li>
<li>ExtClassLoader：主要负责加载jre/lib/ext目录下的一些扩展的jar。</li>
<li>AppClassLoader：主要负责加载应用程序的主函数类</li>
</ul>
<h2 id="4-双亲委派机制"><a href="#4-双亲委派机制" class="headerlink" title="4.双亲委派机制"></a>4.双亲委派机制</h2><p>​    为了保证安全。</p>
<p>​    APP–&gt;EXT（扩展）–&gt;Bootstrap(最终执行) 会一直向上找，如果高层找不到在由最高层向下找。</p>
<p><img src="https://i.loli.net/2021/06/09/kvoHOZRlJExf6yK.png"></p>
<p>流程：</p>
<ol>
<li>类加载器收到类加载的请求</li>
<li>讲这个请求向上委托给父类加载器去完成，一直向上委托，直到启动类加载器</li>
<li>启动类加载器检查是否能够加载当前这个类，能加载就结束流程，适用当前的加载器，否则，抛出异常，通知子加载器进行加载</li>
<li>重复3</li>
</ol>
<h2 id="5-沙箱安全机制"><a href="#5-沙箱安全机制" class="headerlink" title="5.沙箱安全机制"></a>5.沙箱安全机制</h2><p>Java安全模型的核心就是Java沙箱(sandbσx),什么是沙箱?沙箱是一个限制程序运行的环境。沙箱机制就是将Java代码限定在虛拟杋(Jνm特定的运行范围中,并且严格限制代码对本地系统资源访问,通过这样的措施来保证对代码的有效隔离,防止对本地系统造成破坏。沙箱主要限制系统资源访问,那系统资源包括什么?CP∪、内存、文件系统、网络。不同级别的沙箱对这些资源访问的限制也可以不一样。</p>
<p>所有的Java程序运行都可以指定沙箱,可以定制安全策略。</p>
<p>Java中将执行程序分成本地代码和远程代码两种,本地代码默认视为可信仼的,而远程代码则被看作是不受信的。对于授信的本地代码,可以访问一切本地资源。而对于非授信的远程代码在早期的ava实现中,安全依赖于沙箱( Sandbox)机制。如下图所示JDK1.0安全模型。</p>
<p><img src="https://i.loli.net/2021/06/09/DlVMqOFLwjSYtxT.png"></p>
<p>但如此严格的安全机制也给程序的功能扩展带来障碍，比如当用户希望远程代码访问本地系统的文件时候，就无法实现。因此在后续的Java 1.1版本中， 针对安全机制做了改进， 增加了安全策略， 允许用户指定代码对本地资源的访问权限。如下图所示JDK 1.1安全模型。</p>
<p><img src="https://i.loli.net/2021/06/09/eGxbOuMc7LXKJ4Q.png"></p>
<p>在Java 1.2版本中， 再次改进了安全机制， 增加了代码签名。不论本地代码或是远程代码， 都会按照用户的安全策略设定，由类加载器加载到虚拟机中权限不同的运行空间，来实现差异化的代码执行权限控制。如下图所示JDK 1.2安全模型。</p>
<p><img src="https://i.loli.net/2021/06/09/yfqXP6QO3Wi2xIY.png"></p>
<p>当前最新的安全机制实现， 则引入了域(Domain) 的概念。虚拟机会把所有代码加载到不同的系统域和应用域，系统域部分专门负责与关键资源进行交互，而各个应用域部分则通过系统域的部分代理来对各种需要的资源进行访问。虚拟机中不同的受保护域(Protected Domain) ， 对应不一样的权限(Permission) 。存在于不同域中的类文件就具有了当前域的全部权限， 如下图所示最新的安全模型(jdk 1.6)。</p>
<p><img src="https://i.loli.net/2021/06/09/e7C4LoYypuH1PvQ.png"></p>
<p>组成沙箱的基本组件：</p>
<p>·字节码校验器(bytecode verifier) ：确保Java类文件遵循Java语言规范。这样可以帮助Java程序实现内存保护。“但并不是所有的类文件都会经过字节码校验，比如核心类。</p>
<p>·类装载器(classloader) ：其中类装载器在3个方面对Java沙箱起作用</p>
<ul>
<li><p>​    它防止恶意代码去干涉善意的代码；    //双亲委派机制</p>
</li>
<li><p>​    它守护了被信任的类库边界；</p>
</li>
<li><ul>
<li>​    它将代码归入保护域，确定了代码可以进行哪些操作。//沙箱</li>
</ul>
</li>
</ul>
<p>虚拟机为不同的类加载器载入的类提供不同的命名空间，命名空间由一系列唯一的名称组成，每一个被装载的类将有一个名字， 这个命名空间是由Java虚拟机为每一个类装载器维护的， 它们互相之间甚至不可见。</p>
<p>类装载器采用的机制是双亲委派模式。</p>
<p>1.从最内层JVM自带类加载器开始加载， 外层恶意同名类得不到加载从而无法使用；</p>
<p>2.由于严格通过包来区分了访问域，外层恶意的类通过内置代码也无法获得权限访问到内层类，破坏代码就自然无法生效。</p>
<ul>
<li><ul>
<li>存取控制器(access controller) ：存取控制器可以控制核心API对操作系统的存取权限， 而这个控制的策略设定，可以由用户指定。</li>
<li>安全管理器(securitymanager) ：是核心API和操作系统之间的主要接口。实现权限控制， 比存取控制器优先级高。</li>
<li>安全软件包(security package) ：java.security下的类和扩展包下的类， 允许用户为自己的应用增加新的安全特性，包括：</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>安全提供者</li>
<li>消息摘要</li>
<li>数字签名 keytools</li>
<li>加密</li>
<li>鉴别</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="6-Native"><a href="#6-Native" class="headerlink" title="6.Native"></a>6.Native</h2><p>如果方法使用native关键字，java会去调用C语言库。</p>
<p>具体做法：在Native Method Stack中等级native方法，在执行引擎执行的时候加载native library</p>
<p>会进入本地方法栈，然后调用本地方法接口(JNI)</p>
<p>JNI:扩展java的使用，融合不同的编程语言为Java所用：(C/C++)</p>
<p>所以在内存中开辟了一块标记区域—— Navite Method Stack</p>
<p>在最终执行的时候，加载本地方法库中的方法 通过 JNI</p>
<p>目前native方法使用的很少，除非要操作硬件。例如写一个驱动，驱动打印机什么的</p>
<p>目前如果需要调用其他语言程序的API，可以通过Restful,RPC,Socket,WebService,Http…</p>
<h2 id="7-PC寄存器"><a href="#7-PC寄存器" class="headerlink" title="7.PC寄存器"></a>7.PC寄存器</h2><p>每个线程都有一个程序计数器，是线程私有的，I就是一个指针，指向方法区中的方法字节码(用来存储指向像一条指令的地址，也即将要执行的指令代码)，在执行引擎读取下一条指令，是一个非常小的内存空间，几乎可以忽略不计</p>
<h2 id="8-方法区"><a href="#8-方法区" class="headerlink" title="8.方法区"></a>8.方法区</h2><p>方法区是被所有线程共享，所有字段和方法字节码，以及一些特殊方法，如构造函数，接口代码也在此定义，简单说，所有定义的方法的信息都保存在该区域，此区域属于共享区间；</p>
<p>静态变量、常量、类信息(构造方法、接口定义)、运行时的常量池存在方法区中，但是实例变量存在堆内存中，和方法区无关</p>
<p>static，final，Class，常量池</p>
<h2 id="9-栈"><a href="#9-栈" class="headerlink" title="9.栈"></a>9.栈</h2><p>栈：栈内存，主观程序的运行，生命周期和线程同步</p>
<p>线程结束，栈内存也就释放了</p>
<p>对于栈来说不存在垃圾回收问题</p>
<p>栈中的东西：</p>
<ul>
<li>8大基本类型</li>
<li>对象引用</li>
<li>实例方法</li>
</ul>
<p>栈运行原理：栈帧</p>
<p><img src="https://i.loli.net/2021/06/09/9fVtrKWiCYA5Uwu.png"></p>
<p>程序正在执行的方法，一定在栈的顶部</p>
<p>如果栈满:StackOverflowError</p>
<h3 id="栈-堆-方法区：交互关系"><a href="#栈-堆-方法区：交互关系" class="headerlink" title="栈+堆+方法区：交互关系"></a>栈+堆+方法区：交互关系</h3><p><img src="https://i.loli.net/2021/06/09/EBLvNlbF9WQZkgj.png"></p>
<p>Q1:画出一个对象实例化的过程在内存中？</p>
<p>Q2:栈具体怎么存？</p>
<h2 id="10-三种JVM"><a href="#10-三种JVM" class="headerlink" title="10.三种JVM"></a>10.三种JVM</h2><ul>
<li>Sun 公司 – HotSpot虚拟机</li>
<li>BEA 公司 – JRockit虚拟机</li>
<li>IBM公司 – J9VM虚拟机</li>
</ul>
<h2 id="11-堆"><a href="#11-堆" class="headerlink" title="11.堆"></a>11.堆</h2><p>Heap，一个JVM只有一个堆内存。堆内存的大小是可以调节的。</p>
<p>类加载器读取了类文件后，一般会把什么东西放到堆中？</p>
<p>类，方法，常量，变量。保存我们所有引用类型的真实对象。</p>
<p>堆内存还要细分为三个区域：</p>
<ul>
<li><p>新生区/代 Eden Space</p>
</li>
<li><ul>
<li>伊甸园</li>
<li>幸存者0区</li>
<li>幸存者1区</li>
</ul>
</li>
<li><p>老年区/代</p>
</li>
<li><ul>
<li>老年区</li>
</ul>
</li>
<li><p>永久区/代</p>
</li>
<li><ul>
<li>永久存储区</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GC垃圾回收主要集中在伊甸园区和养老区</span><br><span class="line">假设内存满了，OOM，堆内存不够</span><br><span class="line">    OutOfMemoryError:Java Heap Space</span><br></pre></td></tr></table></figure>



<p>JDK8后，永久存储区改名为——元空间，有区别！</p>
<p><img src="https://i.loli.net/2021/06/09/GTOuacqbftgUA54.png"></p>
<h2 id="12-新生区"><a href="#12-新生区" class="headerlink" title="12.新生区"></a>12.新生区</h2><ul>
<li>类：诞生和成长的地方，甚至死亡；</li>
<li>伊甸园区:所有的对象都在此区域new出来。</li>
<li>幸存者区(0,1)</li>
</ul>
<p>伊甸园区满了以后触发一次轻量GC，回收死亡的对象，并且将存活的对象移动到幸存者区。</p>
<p>如果幸存者区域满了以后，触发Full GC，会将存活的对象移动到养老区。</p>
<p>HotSpot VM</p>
<p>Partial GC：并不收集整个GC堆的模式</p>
<ul>
<li>Young GC：只收集young gen的GC</li>
<li>Old GC：只收集old gen的GC。只有CMS的concurrent collection是这个模式</li>
<li>Mixed GC：收集整个young gen以及部分old gen的GC。只有G1有这个模式</li>
</ul>
<p>Full GC：收集整个堆，包括young gen、old gen、perm gen（如果存在的话）等所有部分的模式。</p>
<p>最简单的分代式GC策略，按HotSpot VM的serial GC的实现来看，触发条件是：</p>
<ul>
<li>young GC：当young gen中的eden区分配满的时候触发。注意young GC中有部分存活对象会晋升到old gen，所以young GC后old gen的占用量通常会有所升高。</li>
<li>full GC：当准备要触发一次young GC时，如果发现统计数据说之前young GC的平均晋升大小比目前old gen剩余的空间大，则不会触发young GC而是转为触发full GC（因为HotSpot VM的GC里，除了CMS的concurrent collection之外，其它能收集old gen的GC都会同时收集整个GC堆，包括young gen，所以不需要事先触发一次单独的young GC）；或者，如果有perm gen的话，要在perm gen分配空间但已经没有足够空间时，也要触发一次full GC；或者System.gc()、heap dump带GC，默认也是触发full GC。</li>
</ul>
<h2 id="13-老年区"><a href="#13-老年区" class="headerlink" title="13.老年区"></a>13.老年区</h2><ul>
<li></li>
</ul>
<h2 id="14-永久区"><a href="#14-永久区" class="headerlink" title="14.永久区"></a>14.永久区</h2><p>该区域常驻内存。用来存放JDK自身携带的Class对象。Interface元数据。存储的是Java运行时的一些环境和类的信息，该区域不存在GC。关闭JVM的时候，就会释放该区域内存。</p>
<p>崩溃原因：加载了大量的第三方jar包/Tomcat部署了太多的应用/大量动态生成的反射类，不断的被加载，直到内存满，出现OOM</p>
<p>PS:出现OOM</p>
<ul>
<li>JDK1.6之前:永久代，常量池是在方法区。</li>
<li>JDK1.7    : 永久代，但是慢慢的退化了，<code>去永久代</code> ，常量池在堆中</li>
<li>JDK1.8    : 无永久代，常量池在元空间  – 元空间出现在JDK1.8</li>
</ul>
<p><img src="https://i.loli.net/2021/06/09/EAaYS1JR3G7UOjF.png"></p>
<p>元空间：逻辑上存在，物理上不存在</p>
<p>原因：新生代+老年代 = total mem</p>
<h2 id="15-堆内存调优"><a href="#15-堆内存调优" class="headerlink" title="15.堆内存调优"></a>15.堆内存调优</h2><p>默认情况下，分配的总内存时电脑内存的1/4,初始化的内存是1/64</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-Xms1024m -Xmx1024m -XX:+PrintGCDetails</span><br></pre></td></tr></table></figure>



<p>遇到OOM怎么办：</p>
<ol>
<li>尝试扩大堆内存并且再次尝试</li>
<li>如果1还是产生OOM，则分析内存</li>
</ol>
<p>一些常用的VM参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">堆设置</span><br><span class="line">    -Xms:初始堆大小</span><br><span class="line">    -Xmx:最大堆大小</span><br><span class="line">    -Xmn:新生代大小</span><br><span class="line">    -XX:NewRatio:设置新生代和老年代的比值。如：为3，表示年轻代与老年代比值为1：3</span><br><span class="line">    -XX:SurvivorRatio:新生代中Eden区与两个Survivor区的比值。注意Survivor区有两个。如：为3，表示Eden：Survivor&#x3D;3：2，一个Survivor区占整个新生代的1&#x2F;5  </span><br><span class="line">    -XX:MaxTenuringThreshold:设置转入老年代的存活次数。如果是0，则直接跳过新生代进入老年代</span><br><span class="line">    -XX:PermSize、-XX:MaxPermSize:分别设置永久代最小大小与最大大小（Java8以前）</span><br><span class="line">    -XX:MetaspaceSize、-XX:MaxMetaspaceSize:分别设置元空间最小大小与最大大小（Java8以后）</span><br><span class="line">收集器设置</span><br><span class="line">    -XX:+UseSerialGC:设置串行收集器</span><br><span class="line">    -XX:+UseParallelGC:设置并行收集器</span><br><span class="line">    -XX:+UseParalledlOldGC:设置并行老年代收集器</span><br><span class="line">    -XX:+UseConcMarkSweepGC:设置并发收集器垃圾回收统计信息</span><br><span class="line">    -XX:+PrintGC</span><br><span class="line">    -XX:+PrintGCDetails</span><br><span class="line">    -XX:+PrintGCTimeStamps</span><br><span class="line">    -Xloggc:filename并行收集器设置</span><br><span class="line">    -XX:ParallelGCThreads&#x3D;n:设置并行收集器收集时使用的CPU数。并行收集线程数。</span><br><span class="line">    -XX:MaxGCPauseMillis&#x3D;n:设置并行收集最大暂停时间</span><br><span class="line">    -XX:GCTimeRatio&#x3D;n:设置垃圾回收时间占程序运行时间的百分比。公式为1&#x2F;(1+n) 并发收集器设置</span><br><span class="line">    -XX:+CMSIncrementalMode:设置为增量模式。适用于单CPU情况。</span><br><span class="line">    -XX:ParallelGCThreads&#x3D;n:设置并发收集器新生代收集方式为并行收集时，使用的CPU数。并行收集线程数。</span><br><span class="line">    -XX:+HeapDumpOnOutOfMemoryError 输出OOM Dump文件</span><br></pre></td></tr></table></figure>



<h2 id="16-GC-垃圾回收"><a href="#16-GC-垃圾回收" class="headerlink" title="16.GC:垃圾回收"></a>16.GC:垃圾回收</h2><p><img src="https://i.loli.net/2021/06/09/NUwI8MEv5ROYKDH.png"></p>
<ul>
<li>新生代</li>
<li>幸存区(from/to)</li>
<li>老年区</li>
</ul>
<p>JVM在进行GC时，并不是对三个区域全部回收。大部分情况下回收的是新生代</p>
<p>GC两个种类：</p>
<ul>
<li>轻GC</li>
<li>Full GC（全局GC）</li>
</ul>
<p>GC面试题：</p>
<ul>
<li>JVM的内存模型和分区，详细到每个区放什么</li>
<li>堆里面的分区有哪些？Eden，from，to，老年区。说说他们的特点</li>
<li>GC的算法有哪些？</li>
<li>轻GC和FullGC在什么时候触发？</li>
</ul>
<p>每次GC，都会将Eden区活的对象移到幸存区中 —— GC后，Eden区就会是空的</p>
<p>当一个对象经过了15次GC并且未被回收后，就会进入养老区</p>
<p>​    该参数可调：<code>-XX:MaxTenuringThreshold=x</code> x = 次数（通过这个参数可以设定进入老年代的时间）</p>
<h2 id="17-JMM（Java-Memory-Model）"><a href="#17-JMM（Java-Memory-Model）" class="headerlink" title="17.JMM（Java Memory Model）"></a>17.JMM（Java Memory Model）</h2><p>JMM:允许编译器和缓存以数据在处理器特定的缓存（或寄存器）和主存之间移动的次序拥有重要的特权，除非代码中使用了volatile或synchronized明确请求了某些可见性的保证。</p>
<p>作用：缓存一致性协议，用于定义数据读写的规则</p>
<p>JMM定义了线程工作内存和主内存之间的抽象关系：线程之间的共享变量存储在主内存中，每个线程都有一个私有的本地内存</p>
<p><img src="https://i.loli.net/2021/06/09/GM8BYhArkQpVtTR.png"></p>
<p>解决共享对象可见性：volilate,synchronized</p>
<p>2.关于JMM的一些同步的约定：</p>
<p>1、线程解锁前，必须把共享变量立刻刷回主存。</p>
<p>2、线程加锁前，必须读取主存中的最新值到工作内存中！</p>
<p>3、加锁和解锁是同一把锁。</p>
<p>线程工作时，会有自己的一个工作内存，它会主内存之间有相关联系，有八种操作，具体看下列解释和图例：</p>
<p>内存交互操作有8种，虚拟机实现必须保证每一个操作都是原子的，不可在分的（对于double和long类型的变量来说，load、store、read和writ操作在某些平台上允许例外）</p>
<ol>
<li>lock （锁定）：作用于主内存的变量，把一个变量标识为线程独占状态</li>
<li>unlock （解锁）：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定</li>
<li>read （读取）：作用于主内存变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用</li>
<li>load （载入）：作用于工作内存的变量，它把read操作从主存中变量放入工作内存中</li>
<li>use （使用）：作用于工作内存中的变量，它把工作内存中的变量传输给执行引擎，每当虚拟机遇到一个需要使用到变量的值，就会使用到这个指令</li>
<li>assign （赋值）：作用于工作内存中的变量，它把一个从执行引擎中接受到的值放入工作内存的变量副本中</li>
<li>store （存储）：作用于主内存中的变量，它把一个从工作内存中一个变量的值传送到主内存中，以便后续的write使用</li>
<li>write （写入）：作用于主内存中的变量，它把store操作从工作内存中得到的变量的值放入主内存的变量中</li>
</ol>
<p>JMM 对这八种指令的使用，制定了如下规则：</p>
<ol>
<li>不允许read和load、store和write操作之一单独出现。即使用了read必须load，使用了store必须write</li>
<li>不允许线程丢弃他最近的assign操作，即工作变量的数据改变了之后，必须告知主存</li>
<li>不允许一个线程将没有assign的数据从工作内存同步回主内存</li>
<li>一个新的变量必须在主内存中诞生，不允许工作内存直接使用一个未被初始化的变量。就是怼变量实施use、store操作之前，必须经过assign和load操作</li>
<li>一个变量同一时间只有一个线程能对其进行lock。多次lock后，必须执行相同次数的unlock才能解锁</li>
<li>如果对一个变量进行lock操作，会清空所有工作内存中此变量的值，在执行引擎使用这个变量前，必须重新load或assign操作初始化变量的值</li>
<li>如果一个变量没有被lock，就不能对其进行unlock操作。也不能unlock一个被其他线程锁住的变量</li>
<li>对一个变量进行unlock操作之前，必须把此变量同步回主内存</li>
</ol>
<h2 id="18-总结"><a href="#18-总结" class="headerlink" title="18.总结"></a>18.总结</h2><p>分代收集理论</p>
<p>年轻代：</p>
<ul>
<li>主要是用复制算法</li>
<li>复制算法的最佳场景：对象存活率较低的时候</li>
</ul>
<p>老年代：</p>
<ul>
<li>区域大，存活率高</li>
<li>标记清除（内存碎片不是太多） + 标记压缩（内存碎片过多）</li>
</ul>
]]></content>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
</search>
